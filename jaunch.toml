[launch]
# The launch section configures how Jaunch will launch the JVM.

# Path to splash screen image to show, if desired.
splash-image = 'images/icon-flat.png'

# Runtime classpath elements to pass to Java.
classpath = [
    '--full-classpath|jars/*.jar',
    '--full-classpath|jars/bio-formats/*.jar',
    '--full-classpath|plugins/*.jar',
    '!--full-classpath|jars/imagej-launcher*.jar',  # TODO: Figure out best syntax here and make it work.
]

# Maximum amount of memory for the Java heap to consume. Examples:
# - For 1567 MB: "1567m"
# - For 48 GB: "48g"
# - For 75% of available RAM: "75%"
# - For 3 GB less than available RAM: "-3g"
# These will be translated into an appropriate "-Xmx..." argument.

max-heap = '75%'

# Q: How to specify flags that should only be used for certain Java version ranges? Certain OSes?

# IDEA: Layer the jaunch.toml with fiji.toml. The fiji.toml will be used when fiji.exe is used,
# layered on top of the base jaunch.toml, which is always read with any launcher.
# In this way, we can have a Fiji-agnostic jaunch.toml, which is rarely modified, and a more
# frequently customized fiji.toml.
# But... to make the updater happy, we may also need a fiji-default.toml, so that users can
# edit their fiji.toml without the updater seeing it as locally modified, and so that fiji.toml
# has a template to start from initially.
#
# Override scenarios:
# - global settings
# - specific OS family
# - specific architecture and/or bitness
# - specific Java version range -- e.g. GC flags that only work for some versions
#   - java8 = Only Java 8
#   - java9-11 = Java 9, Java 10, Java 11
#   - java9+ = Java 9 or later
# - specific Java vendors?
#   - zulu* =
# - any/all of the above, for only a specific launcher (e.g. fiji)
#   - in a separate .toml file named the same as the launcher
#   - just layered/appended, no subtraction, no prepending
# Order matters. So we cannot use separate sections unless we use arrays of tables,
# which gets pretty complicated. Let's use a simpler syntax instead: hints before a bar (|) symbol.
# So, for every string in the file, we split on bar and then filter by matching environments.
# Let's hope Jaunch never needs to support literal bar symbols!
#
# We can also allow the negation of any criterion by prepending with ! symbol.
# - !java8 = Every Java version except 8
# - !zulu* = Every Java vendor except Zulu
#
# We can also support conditional flags.
# Typically, each flag on the CLI takes some number of additional parameters after it, maybe 0.
# We can write the Kotlin code to parse them into a nice key/value store (TODO: what about repeated keys?).
# - If it takes zero parameters, its value becomes a boolean.
# - We can say "--foo bar" and we'll get "foo=bar" in the table.
# - We can say "--foo=bar" and same.
# - We can say "--foo fizz buzz" and we'll get "foo=[fizz, buzz]" in the table.
# - We can say "--foo" and we'll get "foo=true".
# - We can say *nothing*, and when checking for the value 'foo' in the table, we'll be told `false`.
# With this scheme, we have additive options, and can limitedly fake subtractive behavior based on falsy parameters.
# Examples:
#     classpath = [
#         '--full-classpath|jars/*',
#         '--full-classpath|jars/bio-formats/*',
#         '--full-classpath|plugins/*',
#         '!--full-classpath|${launcherJar.getAbsolutePath}',
#     ]
#

jaunch-options = [
    # TODO: Some of these are still ImageJ/Fiji-specific. Sort them out.
    '--help,-h|show this help',
    '--dry-run|show the command line, but do not run anything',
    '--info|informational output',
    '--debug|verbose output',
    '--system|do not try to run bundled Java',
    '--java-home=<path>|specify JAVA_HOME explicitly',
    "--print-java-home|print ImageJ's idea of JAVA_HOME",
    '--print-ij-dir|print where ImageJ thinks it is located',
    '--headless|run in text mode',
    "--ij-dir=<path>|set the ImageJ directory to <path> (used to find\njars/, plugins/ and macros/)",
    "--heap,--mem,--memory=<amount>|set Java's heap size to <amount> (e.g. 512M)",
    '--class-path,--classpath,-classpath,--cp,-cp=<path>|append <path> to the class path',
    '--jar-path,--jarpath,-jarpath=<path>|append .jar files in <path> to the class path',
    '--pass-classpath=<classpath>|pass -classpath <classpath> to the main() method',
    '--full-classpath|call the main class with the full ImageJ class path',
    '--dont-patch-ij1|do not try to runtime-patch ImageJ1',
    "--ext=<path>|set Java's extension directory to <path>",  # TODO: This is no longer a thing in later versions of Java.
    "--default-gc|do not use advanced garbage collector settings by default\n(-XX:+G1GC)",  # TODO: This changed.
    '--gc-g1|use the G1 garbage collector',  # TODO: Did this change?
    '--debug-gc|show debug info about the garbage collector on stderr',
    "--debugger=<port>[,suspend]|start the JVM in a mode so an IDE's debugger can attach to it",
    '--no-splash|suppress showing a splash screen upon startup',

    # Fiji-specific
    '--ij2|start ImageJ2 instead of ImageJ1',
    '--ij1|start ImageJ1',
    '--allow-multiple|do not reuse existing ImageJ instance',
    '--plugins=<dir>|use <dir> to discover plugins',
    '--run <plugin> [<arg>]|run <plugin> in ImageJ, optionally with arguments
    '--compile-and-run <path-to-.java-file>|compile and run <plugin> in ImageJ',
    '--edit [<file>...]|edit the given file in the script editor',

    # Options to run programs other than ImageJ:
    '--update|start the command-line version of the ImageJ updater',
    "--main-class=<class name>|start the given class instead of ImageJ\n(this is the default when called with a file ending in .class)",
]

# Arguments to pass to the JVM.
jvm-args = [
    # In https://forum.image.sc/t/88620, acardona wrote:
    # > When running in a machine with many CPU cores (like 64, or 256) and lots
    # > of RAM (e.g., more than 100 GB, like 500 GB of heap size as defined by -Xmx),
    # > I find that the concurrent garbage collector (G1 GC) works *a lot better*.
    '!--default-gc|-XX:+G1GC',

    # Supported since Jigsaw was introduced in Java 9.
    # Necessary for ij1-patcher to work properly with Java 17+.
    'java9+|--add-opens=java.base/java.lang=ALL-UNNAMED',
    'java9+|--add-opens=java.base/java.util=ALL-UNNAMED',  # TODO: Why? What triggers this?
    'java9+|linux*|--add-opens=java.desktop/sun.awt=ALL-UNNAMED',  # TODO: Why? Is this Linux-specific?
    'java9+|linux*|--add-opens=java.desktop/sun.awt.X11=ALL-UNNAMED',  # Linux only; what about Wayland?
    'java9+|macos*|--add-opens=java.desktop/com.apple.eawt=ALL-UNNAMED',  # macOS only

    '-Dpython.cachedir.skip=true',  # Make Jython behave better.
    '-Dplugins.dir=${ijDirPath}',  # ImageJ cares about this property.
    '-Dimagej.splash=true',

    # TODO: How can we support the --full-classpath mode via only configuration, without customizing the Kotlin program?
    '-Djava.class.path=${launcherJar.getAbsolutePath}',

    '-Dimagej.dir=${ijDirPath}',
    '-Dij.dir=${ijDirPath}',
    '-Dfiji.dir=${ijDirPath}',

    # These will become `fiji.exe`, `fiji`, `Contents/MacOS/fiji`
    '-Dfiji.executable=${ijDirPath}/ImageJ-${systemType}.exe',
    '-Dij.executable=${ijDirPath}/ImageJ-${systemType}.exe',

    '-Djava.library.path=${ijDirPath}/lib/$systemType;${ijDirPath}/mm/${systemType}',

    '-Dscijava.context.strict=false',  # Make SciJava startup less brittle.
    '-Dpython.console.encoding=UTF-8',  # TODO: What is this for?
]

main-class = 'net.imagej.launcher.ClassLauncher'

main-args = [
    '-ijjarpath', 'jars',
    '-ijjarpath', 'plugins',
    'net.imagej.Main',
]


# Usage: ./ImageJ-linux64 [<Java options>.. --] [<ImageJ options>..] [<files>..]

# ImageJ launcher 6.0.3-SNAPSHOT (build 47befcbd)
# Java options are passed to the Java Runtime, ImageJ
# options to ImageJ (or Jython, JRuby, ...).

# In addition, the following options are supported by ImageJ:
# General options:
# --help, -h
#                     show this help
# --dry-run
#                     show the command line, but do not run anything
# --info
#                     informational output
# --debug
#                     verbose output
# --system
#                     do not try to run bundled Java
# --java-home <path>
#                     specify JAVA_HOME explicitly
# --print-java-home
#                     print ImageJ's idea of JAVA_HOME
# --print-ij-dir
#                     print where ImageJ thinks it is located
# --headless
#                     run in text mode
# --ij-dir <path>
#                     set the ImageJ directory to <path> (used to find
#                     jars/, plugins/ and macros/)
# --heap, --mem, --memory <amount>
#                     set Java's heap size to <amount> (e.g. 512M)
# --class-path, --classpath, -classpath, --cp, -cp <path>
#                     append <path> to the class path
# --jar-path, --jarpath, -jarpath <path>
#                     append .jar files in <path> to the class path
# --pass-classpath
#                     pass -classpath <classpath> to the main() method
# --full-classpath
#                     call the main class with the full ImageJ class path
# --dont-patch-ij1
#                     do not try to runtime-patch ImageJ1
# --ext <path>
#                     set Java's extension directory to <path>
# --default-gc
#                     do not use advanced garbage collector settings by default
#                     (-Xincgc -XX:PermSize=128m)
# --gc-g1
#                     use the G1 garbage collector
# --debug-gc
#                     show debug info about the garbage collector on stderr
# --debugger=<port>[,suspend]
#                     start the JVM in a mode so Eclipse's debugger can attach to it
# --no-splash
#                     suppress showing a splash screen upon startup

# Options for ImageJ:
# --ij2
#                     start ImageJ2 instead of ImageJ1
# --ij1
#                     start ImageJ1
# --allow-multiple
#                     do not reuse existing ImageJ instance
# --plugins <dir>
#                     use <dir> to discover plugins
# --run <plugin> [<arg>]
#                     run <plugin> in ImageJ, optionally with arguments
# --compile-and-run <path-to-.java-file>
#                     compile and run <plugin> in ImageJ
# --edit [<file>...]
#                     edit the given file in the script editor

# Options to run programs other than ImageJ:
# --update
#                     start the command-line version of the ImageJ updater
# --main-class <class name>
#                     start the given class instead of ImageJ
#                     (this is the default when called with a file ending in .class)

# --------------------------

[java-search]
# The java-search section defines where Jaunch will discover Java installations.

# Acceptable range of Java versions to match.
version-min = 8
#version-max = 21

# Paths to check for Java installations.
root-paths = [
    '--java-home|${java-home}',
    '$JAVA_HOME',
    '$CONDA_PREFIX/pkgs/openjdk*/lib/jvm',               # Conda (openjdk 9+)
    '$CONDA_PREFIX/pkgs/openjdk*',                       # Conda (openjdk 8)
    '!--system|win64|java/win64',
    # TODO: Should we support 32-bit Windows or 32-bit Linux? Does Kotlin Native?
    '!--system|win32|java/win32',
    '!--system|macosx-arm64|java/macosx-arm64',
    '!--system|macosx*|java/macosx',
    '!--system|linux64|java/linux64',
    '!--system|linux32|java/linux32',
    '!--system|linux32|java/linux',
    'win32|C:/Program Files (x86)/Java',
    'win64|C:/Program Files/Java',
    'win*|~/scoop/Apps/...',                             # TODO: Scoop
    'macosx*|/Library/Java/JavaVirtualMachines',         # Java 8+
    'macosx*|/System/Library/Java/JavaVirtualMachines',  # Apple Java 6
    'macosx*|/usr/local/...',                            # TODO: Homebrew
    'linux*|/usr/lib/jvm',                               # package manager
    'linux*|/var/lib/flatpak/...',                       # TODO: Flatpak
    'linux*|~/.sdkman/candidates/java',                  # sdkman.io
    'linux*|~/.cache/cjdk/v*/jdks/*',                    # github.com/cachedjdk/cjdk
    'linux*|~/.jdk',                                     # github.com/jyksnw/install-jdk
    'linux*|~/.jre',                                     # github.com/jyksnw/install-jdk
]

# And then there are programmatic ways to glean the Java installations,
# depending on operating system:
#
# - Windows: look for registry keys
# - macOS: /usr/libexec/java_home -V
# - Linux: /usr/sbin/update-java-alternatives -l
#
# TODO: Invent schema elements to support programmatic detection approaches.

# Any of the following can be bare, or nested in another JDK root folder.
# No assumption is made about the naming scheme of such a JDK root folder,
# because not all distros are predictably named. Examples:
#
# macosx  JBRSDK 8u252          : jdk/Contents/Home/jre/lib/jli/libjli.dylib
# linux64 JBRSDK 11.0.6-b520.66 : jbrsdk/lib/server/libjvm.so
# linux64 JBRSDK 11.0.8         : jbrsdk_11.0.8_x64/jbr/lib/server/libjvm.so

# The nested jre/ is only present for OpenJDK 8, nothing after.
# But one wrinkle: on macOS, some distros *also* have a libjli.dylib
# in Contents/MacOS in addition to its other location. And the two
# are *not* binary identical. Testing is needed to determine if
# there's any difference in behavior based on which one gets linked.

libjvm-suffixes = [
    # Paths to search on macOS systems.
    'macos*|Contents/Home/jre/lib/jli/libjli.dylib',  # Java 8
    'macos*|Contents/Home/lib/jli/libjli.dylib',      # Java 9-11
    'macos*|Contents/Home/lib/libjli.dylib',          # Java 12+
    #'macos|Contents/MacOS/libjli.dylib',             # some distros Java 8+
    'macos*|Contents/Libraries/libjli.jnilib',        # Apple Java 6
    # Paths to search on Windows systems.
    'win*|bin/server/jvm.dll',                        # Java 9+
    'win*|bin/client/jvm.dll',                        # Java 9+
    'win*|jre/bin/server/jvm.dll',                    # Java 8
    'win*|jre/bin/client/jvm.dll',                    # Java 8
    # Paths to search on Linux systems.
    'linux*|lib/server/libjvm.so',                    # Java 9+
    'linux*|jre/lib/amd64/server/libjvm.so',          # Java 8 (64-bit)
    'linux*|jre/lib/i386/server/libjvm.so',           # Java 8 (32-bit)
    'linux*|jbr/lib/server/libjvm.so',                # jbrsdk_11.0.8_x64
]
